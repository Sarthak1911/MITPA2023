// BFS ---- DFS--- //
#include <iostream>
using namespace std;

class node
{
public:
    int data;
    node *next;
} *front = NULL, *rear = NULL;

void enqueue(int x)
{
    node *t;
    t = new node();
    if (t == NULL)
    {
        cout << "Queue is FULL\n";
    }
    else
    {
        t->data = x;
        t->next = NULL;
        if (front == NULL)
        {
            front = rear = t;
        }
        else
        {
            rear->next = t;
            rear = t;
        }
    }
}
int dequeue()
{
    int x = -1;
    node *t;
    if (front == NULL)
    {
        cout << "Queue is Empty\n";
    }
    else
    {
        x = front->data;
        t = front;
        front = front->next;
        free(t);
    }
    return x;
}
int isEmpty()
{
    return front == NULL;
}

// BFS //
void BFS(int G[][5], int start, int n)
{
    int i = start;
    int visited[5] = {0};
    printf("%d  ", i);
    visited[i] = 1;
    enqueue(i);

    while (!isEmpty())
    {
        i = dequeue();
        for (int j = 1; j < n; j++)
        {
            if ((G[i][j] == 1) && (visited[j] == 0))
            {
                printf("%d  ", j);
                visited[j] = 1;
                enqueue(j);
            }
        }
    }
}

// DFS //
void DFS(int G[][5], int start, int n)
{
    static int visited[5] = {0};
    int j;

    if (visited[start] == 0)
    {
        printf("%d  ", start);
        visited[start] = 1;

        for (j = 1; j < n; j++)
        {
            if ((G[start][j] == 1) && (visited[j] == 0))
            {
                DFS(G, j, n);
            }
        }
    }
}

int main()
{
    int G[5][5] = {{0, 1, 1, 1, 0},
                   {1, 0, 1, 0, 0},
                   {1, 1, 0, 0, 1},
                   {1, 0, 0, 0, 0},
                   {0, 0, 1, 0, 0}};

    BFS(G, 0, 5);
    printf("\n");
    DFS(G, 0, 5);

    return 0;
}

////-----------------------------------------------------------//

//****************** Linear Probing ****************************//
#include <iostream>
using namespace std;

#define SIZE 10

int Hash(int key)
{
    return key%SIZE;
}

int probe(int H[],int key)
{
    int index=Hash(key);
    int i=0;
    while(H[(index+i)%SIZE]!=0)
    {
        i++;
    }
    return (index+i)%SIZE;
}

void insert(int H[],int key)
{
    int index=Hash(key);
    if(H[index]!=0)
    {
        index=probe(H,key);
    }
    H[index]=key;
}

int search(int H[],int key)
{
    int index=Hash(key);
    int i=0;
    while(H[(index+i)%SIZE]!=key)
    {
        i++;
    }
    return (index+i)%SIZE;
}

int main()
{
    int HT[10]={0};

    insert(HT,12);
    insert(HT,25);
    insert(HT,35);
    insert(HT,26);

    cout<<"The Hash table and values are : "<<endl;
    for(int i=0;i<SIZE;i++)
    {
        cout<<"H["<<i<<"] index value is "<<HT[i]<<endl;
    }
    cout<<"\nKey found at "<<search(HT,35);
    return 0;
}
//-----------------------------------------------------------------------------------------------------//

//**************  Dijisktra's Algo  *********************//

#include <iostream>
using namespace std;
#define V 6

int minDist(int dist[],bool sptSet[])
{
    int min=INT_MAX,min_index;
    for(int v=0;v<V;v++)
    {
        if(sptSet[v]==false && dist[v]<=min)
        {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printpath(int parent[],int j)
{
    if(parent[j]==-1)
    {
        return;
    }
    printpath(parent,parent[j]);
    printf("%d  ",j);
}

void printSolution(int dist[],int n,int parent[])
{
    int src=0;
    printf("vertex\t Distance\tPath");
    for(int i=1;i<V;i++)
    {
        printf("\n%d -> %d \t\t %d\t\t%d ",src,i,dist[i],src);
        printpath(parent,i);
    }
}

void Dijikstra(int G[V][V],int src)
{
    int dist[V];
    bool sptSet[V];
    int parent[V];

    for(int i=0;i<V;i++)
    {
        parent[0]= -1;
        dist[i]= INT_MAX;
        sptSet[i] = false;
    }
    dist[src]=0;
    for(int i=0;i<V-1;i++)
    {
        int u = minDist(dist,sptSet);
        sptSet[u]=true;

        for(int v=0;v<V;v++)
        {
            if(!sptSet[v] && G[u][v] && dist[u] + G[u][v] < dist[v])
            {
                parent[v] = u;
                dist[v] = dist[u] + G[u][v];
            }
        }
    }
    printSolution(dist, V , parent);
}

int main()
{
    int G[V][V] = {{0, 2, 4, 0, 0, 0},
                   {0, 0, 1, 7, 0, 0},
                   {0, 0, 0, 0, 3, 0},
                   {0, 0, 0, 0, 0, 1},
                   {0, 0, 0, 0, 2, 5},
                   {0, 0, 0, 0, 0, 0}};
    Dijikstra(G,0);

    return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------//

// ********************* PRIM'S ALGO *******************//
#include <iostream>
using namespace std;
#define I 32767

int cost[8][8] = {{I, I, I, I, I, I, I, I},
                  {I, I, 25, I, I, I, 5, I},
                  {I, 25, I, 12, I, I, I, 10},
                  {I, I, 12, I, 8, I, I, I},
                  {I, I, I, 8, I, 16, I, 14},
                  {I, I, I, I, 16, I, 20, 18},
                  {I, 5, I, I, I, 20, I, I},
                  {I, I, 10, I, 14, 18, I, I}};

int near[8] = {I, I, I, I, I, I, I, I};

int t[2][6];

int main()
{
    int i, j, k, u, v, n = 7, min = I;
    for (i = 1; i <= n; i++)
    {
        for (j = i; j <= n; j++)
        {
            if (cost[i][j] < min)
            {
                min = cost[i][j];
                u = i, v = j;
            }
        }
    }

    t[0][0] = u, t[1][0] = v;
    near[u] = near[v] = 0;

    for (i = 1; i <= n; i++)
    {
        if (near[i] != 0)
        {
            if (cost[i][u] < cost[i][v])
            {
                near[i] = u;
            }
            else
            {
                near[i] = v;
            }
        }
    }

    for (i = 1; i < n - 1; i++)
    {
        min = I;
        for (j = 1; j <= n; j++)
        {
            if (near[j] != 0 && cost[j][near[j]] < min)
            {
                min = cost[j][near[j]];
                k = j;
            }
        }

        t[0][i] = k, t[1][i] = near[k];
        near[k] = 0;
        for (j = 1; j <= n; j++)
        {
            if (near[j] != 0 && cost[j][k] < cost[j][near[j]])
            {
                near[j] = k;
            }
        }
    }

    for (i = 0; i < n - 1; i++)
    {
        cout << " ( " << t[0][i] << " , " << t[1][i] << " ) " << endl;
    }

    return 0;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
