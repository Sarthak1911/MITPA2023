class AVLNode:
    def __init__(self, keyword, value):
        self.keyword = keyword
        self.value = value
        self.left = None
        self.right = None
        self.height = 1


class AVLTree:
    def __init__(self):
        self.root = None


    def getHeight(self, node):
        if not node:
            return 0
        return node.height


    def getBalance(self, node):
        if not node:
            return 0
        return self.getHeight(node.left) - self.getHeight(node.right)


    def leftRotate(self, node):
        rightChild = node.right
        leftChildOfRightChild = rightChild.left


        rightChild.left = node
        node.right = leftChildOfRightChild


        node.height = 1 + max(self.getHeight(node.left),
                              self.getHeight(node.right))
        rightChild.height = 1 + \
            max(self.getHeight(rightChild.left),
                self.getHeight(rightChild.right))


        return rightChild


    def rightRotate(self, node):
        leftChild = node.left
        rightChildOfLeftChild = leftChild.right


        leftChild.right = node
        node.left = rightChildOfLeftChild


        node.height = 1 + max(self.getHeight(node.left),
                              self.getHeight(node.right))
        leftChild.height = 1 + \
            max(self.getHeight(leftChild.left), self.getHeight(leftChild.right))


        return leftChild


    def insert(self, keyword, value):
        def insertRec(node, keyword, value):
            if not node:
                return AVLNode(keyword, value)
            elif keyword < node.keyword:
                node.left = insertRec(node.left, keyword, value)
            else:
                node.right = insertRec(node.right, keyword, value)


            node.height = 1 + max(self.getHeight(node.left),
                                  self.getHeight(node.right))


            balance = self.getBalance(node)


            if balance > 1 and keyword < node.left.keyword:
                return self.rightRotate(node)


            if balance < -1 and keyword > node.right.keyword:
                return self.leftRotate(node)


            if balance > 1 and keyword > node.left.keyword:
                node.left = self.leftRotate(node.left)
                return self.rightRotate(node)


            if balance < -1 and keyword < node.right.keyword:
                node.right = self.rightRotate(node.right)
                return self.leftRotate(node)


            return node


        self.root = insertRec(self.root, keyword, value)


    def delete(self, keyword):
        def deleteRec(node, keyword):
            if not node:
                return node
            elif keyword < node.keyword:
                node.left = deleteRec(node.left, keyword)
            elif keyword > node.keyword:
                node.right = deleteRec(node.right, keyword)
            else:
                if not node.left:
                    return node.right
                elif not node.right:
                    return node.left
                else:
                    temp = self.getMinValueNode(node.right)
                    node.keyword = temp.keyword
                    node.value = temp.value
                    node.right = deleteRec(node.right, temp.keyword)


            if not node:
                return node


            node.height = 1 + max(self.getHeight(node.left),
                                  self.getHeight(node.right))


            balance = self.getBalance(node)


            if balance > 1 and self.getBalance(node.left) >= 0:
                return self.rightRotate(node)


            if balance < -1 and self.getBalance(node.right) <= 0:
                return self.leftRotate(node)


            if balance > 1 and self.getBalance(node.left) < 0:
                node.left = self.leftRotate(node.left)
                return self.rightRotate(node)


            if balance < -1 and self.getBalance(node.right) > 0:
                node.right = self.rightRotate(node.right)
                return self.leftRotate(node)
                return node
        self.root = deleteRec(self.root, keyword)


    def getMinValueNode(self, node):
        current = node


        while current.left:
            current = current.left


        return current


    def search(self, keyword):
        def searchRec(node, keyword):
            if not node:
                return None
            elif node.keyword == keyword:
                return node.value
            elif keyword < node.keyword:
                return searchRec(node.left, keyword)
            else:
                return searchRec(node.right, keyword)


        return searchRec(self.root, keyword)


    def update(self, keyword, value):
        def updateRec(node, keyword, value):
            if not node:
                return None
            elif node.keyword == keyword:
                node.value = value
            elif keyword < node.keyword:
                node.left = updateRec(node.left, keyword, value)
            else:
                node.right = updateRec(node.right, keyword, value)


            node.height = 1 + max(self.getHeight(node.left),
                                self.getHeight(node.right))


            balance = self.getBalance(node)


            if balance > 1 and keyword < node.left.keyword:
                return self.rightRotate(node)


            if balance < -1 and keyword > node.right.keyword:
                return self.leftRotate(node)


            if balance > 1 and keyword > node.left.keyword:
                node.left = self.leftRotate(node.left)
                return self.rightRotate(node)


            if balance < -1 and keyword < node.right.keyword:
                node.right = self.rightRotate(node.right)
                return self.leftRotate(node)


            return node


        self.root = updateRec(self.root, keyword, value)


    def traverse(self, order='inorder'):
        def traverseInorder(node):
            if node:
                traverseInorder(node.left)
                print(f"{node.keyword} : {node.value}")
                traverseInorder(node.right)


        def traversePreorder(node):
            if node:
                print(f"{node.keyword} : {node.value}")
                traversePreorder(node.left)
                traversePreorder(node.right)


        def traversePostorder(node):
            if node:
                traversePostorder(node.left)
                traversePostorder(node.right)
                print(f"{node.keyword} : {node.value}")


        if order == 'inorder':
            traverseInorder(self.root)
        elif order == 'preorder':
            traversePreorder(self.root)
        elif order == 'postorder':
            traversePostorder(self.root)


def main():
    tree = AVLTree()


    while True:
        print("1. Insert")
        print("2. Delete")
        print("3. Search")
        print("4. Update")
        print("5. Traverse (inorder)")
        print("6. Traverse (preorder)")
        print("7. Traverse (postorder)")
        print("8. Exit")


        choice = int(input("Enter your choice: "))


        if choice == 1:
            keyword = input("Enter the keyword: ")
            value = input("Enter the value: ")
            tree.insert(keyword, value)
            print(f"{keyword} : {value} inserted into the dictionary.")
        elif choice == 2:
            keyword = input("Enter the keyword to delete: ")
            tree.delete(keyword)
            print(f"{keyword} deleted from the dictionary.")
        elif choice == 3:
            keyword = input("Enter the keyword to search: ")
            value = tree.search(keyword)
            if value:
                print(f"{keyword} : {value}")
            else:
                print(f"{keyword} not found in the dictionary.")
        elif choice == 4:
            keyword = input("Enter the keyword to update: ")
            value = input("Enter the new value: ")
            tree.update(keyword, value)
            print(f"{keyword} : {value} updated in the dictionary.")
        elif choice == 5:
            print("Traversing the dictionary (inorder):")
            tree.traverse(order='inorder')
        elif choice == 6:
            print("Traversing the dictionary (preorder):")
            tree.traverse(order='preorder')
        elif choice == 7:
            print("Traversing the dictionary (postorder):")
            tree.traverse(order='postorder')
        elif choice == 8:
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please enter a valid choice.")




main()

