#include <iostream>
#include <climits>
using namespace std;
void dijkstra(int **graph, int V, int src) {
int dist[V];
bool sptSet[V];
for (int i = 0; i < V; i++) {
dist[i] = INT_MAX;
sptSet[i] = false;
}
dist[src] = 0;
for (int count = 0; count < V - 1; count++) {
int u, minDist = INT_MAX;
for (int v = 0; v < V; v++) {
if (!sptSet[v] && dist[v] <= minDist) {
u = v;
minDist = dist[v];
}
}
sptSet[u] = true;
for (int v = 0; v < V; v++) {
if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
&& dist[u] + graph[u][v] < dist[v]) {
dist[v] = dist[u] + graph[u][v];
}
}
}
cout << "Vertex \t Distance from Source" << endl;
for (int i = 0; i < V; i++) {
cout << i << " \t\t " << dist[i] << endl;
}
}
int main() {
int V;
cout << "Enter the number of vertices: ";
cin >> V;
int **graph = new int *[V];
for (int i = 0; i < V; i++) {
graph[i] = new int[V];

}
cout << "Enter the adjacency matrix:" << endl;
for (int i = 0; i < V; i++) {
for (int j = 0; j < V; j++) {
cout<<"Enter the row "<<i+1<<" column "<<j+1<<" Element : ";
cin >> graph[i][j];
}
}
dijkstra(graph, V, 0);
for (int i = 0; i < V; i++) {
delete[] graph[i];
}
delete[] graph;
return 0;
}
