#include<iostream>
#define MAX 30

using namespace std;

int check_operand(char ch)
{
 if((ch>='A' && ch<='Z')||(ch>='a' && ch<='z')||(ch>='0' && ch<='9'))
 {
 return 1;
 }
 else
 {
 return 0;
 }
}
//Check the Character is Operator or Not
int check_operator(char ch)
{
if(ch=='$'||ch=='^'||ch=='+'||ch=='-'||ch=='*'||ch=='/')
return 1;
else
return 0;
}

struct Treenode
{
    Treenode *rchild;
    Treenode *lchild;
    char data;

};


class ET
{

    Treenode *root;
public:
    ET();
    void create(char prefix[MAX]);
    void inorder();
    void inorder(Treenode *root);
    void preorder();
    void preorder(Treenode *root);
    void postorder();
    void postorder(Treenode *root);
    void mirrorImage();
 void mirrorImage(Treenode *root);
};

ET::ET()
{
    root=NULL;
}

void ET::create(char prefix[MAX])
{
 //Declare Stack
Treenode *stack[MAX];
int top=-1;
int i,len,val;
char ch;
Treenode *temp;
//Calculate length of the prefix expression
for(i=0;prefix[i]!='\0';i++);
len=i-1;
//Scan the prefix expression from right to left
for(i=len;i>=0;i--)
{
ch=prefix[i];
//Create and Initialize a new node in the memory
temp=new Treenode;
temp->lchild=NULL;
temp->data=ch;
temp->rchild=NULL;
//If the character is operand push the address on stack
 if(check_operand(ch))
{
stack[++top]=temp;
}
//If the character is operator pop two addresses from stack and built a subtree,
//Push the parents address back on the stack
else if(check_operator(ch))
{
temp->lchild=stack[top--];
temp->rchild=stack[top--];
stack[++top]=temp;
}
else
{
cout<<"\nWrong expression tree";
cout<<"\nNode cannot be created";
exit(0);
}
}
//Once scanning the expression from right to left is over pop the address from stackand store it as root address
root=stack[top--];
}
void ET::inorder()
{

    if(root)

        inorder(root);

    else
     cout<<"The inorder tree cannot be created ";
}
void ET::inorder(Treenode *root)
{

    if(root )
    {

        inorder(root->lchild);
        cout<<root->data<<" ";
        inorder(root->rchild);
    }
}



void ET::postorder()
{

    if(root)

        postorder(root);

    else
     cout<<"The inorder tree cannot be created ";
}
void ET::postorder(Treenode *root)
{

    if(root )
    {

        postorder(root->lchild);
        postorder(root->rchild);
        cout<<root->data<<" ";

    }
}


void ET::preorder()
{

    if(root)

        preorder(root);

    else
     cout<<"The inorder tree cannot be created ";
}
void ET::preorder(Treenode *root)
{

    if(root )
    {
 cout<<root->data<<" ";
        preorder(root->lchild);
        preorder(root->rchild);


    }
}

int main()
{

    char prefix[MAX];
    cout<<"Enter the prefix expression :";
    cin>>prefix;
    ET e;
    e.create(prefix);
    cout<<"The inorder of the following expression is :"<<endl;
    e.inorder();

    cout<<endl<<"The postorder of the following Expression is :"<<endl;
    e.postorder();


     cout<<endl<<"The preorder of the following Expression is :"<<endl;
    e.preorder();

    cout<<endl;



    return 0;




}

